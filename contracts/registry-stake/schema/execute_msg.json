{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Claim Admin",
      "type": "object",
      "required": [
        "claim_admin"
      ],
      "properties": {
        "claim_admin": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update Config",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "required": [
            "config"
          ],
          "properties": {
            "config": {
              "$ref": "#/definitions/CreateOrUpdateConfig"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Registry Create a new execution request",
      "type": "object",
      "required": [
        "create_request"
      ],
      "properties": {
        "create_request": {
          "type": "object",
          "required": [
            "request_info"
          ],
          "properties": {
            "request_info": {
              "$ref": "#/definitions/CreateRequestInfo"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Cancel a request with `id`",
      "type": "object",
      "required": [
        "cancel_request"
      ],
      "properties": {
        "cancel_request": {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Execute a request with `id`",
      "type": "object",
      "required": [
        "execute_request"
      ],
      "properties": {
        "execute_request": {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Deposit into recurring fee pool",
      "type": "object",
      "required": [
        "deposit_recurring_fee"
      ],
      "properties": {
        "deposit_recurring_fee": {
          "type": "object",
          "required": [
            "recurring_count"
          ],
          "properties": {
            "recurring_count": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraw from recurring fee pool",
      "type": "object",
      "required": [
        "withdraw_recurring_fee"
      ],
      "properties": {
        "withdraw_recurring_fee": {
          "type": "object",
          "required": [
            "recurring_count"
          ],
          "properties": {
            "recurring_count": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Staking Implemention for cw20 receive msg, when staking",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Staking when execution fee is native asset `num_stakes` is the number of staking",
      "type": "object",
      "required": [
        "stake_denom"
      ],
      "properties": {
        "stake_denom": {
          "type": "object",
          "required": [
            "num_stakes"
          ],
          "properties": {
            "num_stakes": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Unstake stakers of the caller at index array of `idxs`",
      "type": "object",
      "required": [
        "unstake"
      ],
      "properties": {
        "unstake": {
          "type": "object",
          "required": [
            "idxs"
          ],
          "properties": {
            "idxs": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update executor for current epoch",
      "type": "object",
      "required": [
        "update_executor"
      ],
      "properties": {
        "update_executor": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Black list Add to blacklist",
      "type": "object",
      "required": [
        "add_to_blacklist"
      ],
      "properties": {
        "add_to_blacklist": {
          "type": "object",
          "required": [
            "addrs"
          ],
          "properties": {
            "addrs": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Remove from blacklist",
      "type": "object",
      "required": [
        "remove_from_blacklist"
      ],
      "properties": {
        "remove_from_blacklist": {
          "type": "object",
          "required": [
            "addrs"
          ],
          "properties": {
            "addrs": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Asset": {
      "title": "Description",
      "description": "This enum describes a Terra asset (native or CW20).",
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "description": "A token amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "info": {
          "description": "Information about an asset stored in a [`AssetInfo`] struct",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        }
      }
    },
    "AssetInfo": {
      "oneOf": [
        {
          "description": "Non-native Token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "CreateOrUpdateConfig": {
      "description": "Config struct to initialze or update configuration",
      "type": "object",
      "properties": {
        "admin": {
          "description": "Contract admin",
          "type": [
            "string",
            "null"
          ]
        },
        "auto": {
          "description": "AUTO token for executors",
          "anyOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            },
            {
              "type": "null"
            }
          ]
        },
        "blocks_in_epoch": {
          "description": "Blocks in a single epoch",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "fee_amount": {
          "description": "Amount of request execution fee",
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "fee_denom": {
          "description": "Asset denom of request execution fee",
          "type": [
            "string",
            "null"
          ]
        },
        "stake_amount": {
          "description": "Single stake amount",
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "CreateRequestInfo": {
      "type": "object",
      "required": [
        "is_recurring",
        "msg",
        "target"
      ],
      "properties": {
        "input_asset": {
          "description": "Assets used for this call",
          "anyOf": [
            {
              "$ref": "#/definitions/Asset"
            },
            {
              "type": "null"
            }
          ]
        },
        "is_recurring": {
          "description": "Is this recurring request?",
          "type": "boolean"
        },
        "msg": {
          "description": "Msg for the target contract",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        },
        "target": {
          "description": "Target contract to call for this request",
          "type": "string"
        }
      }
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
