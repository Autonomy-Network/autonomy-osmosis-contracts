/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.17.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { AssetInfo, Addr, Uint128, Config, CreateOrUpdateConfig, Binary, CreateRequestInfo, Asset, EpochInfoResponse, ExecuteMsg, Cw20ReceiveMsg, InstantiateMsg, QueryMsg, OrderBy, RecurringFeeAmountResponse, RequestInfoResponse, Request, RequestsResponse, StakeAmountResponse, StakesResponse, StateResponse, State } from "./Registry.types";
export interface RegistryReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
  state: () => Promise<StateResponse>;
  recurringFees: ({
    user
  }: {
    user: string;
  }) => Promise<RecurringFeeAmountResponse>;
  requestInfo: ({
    id
  }: {
    id: number;
  }) => Promise<RequestInfoResponse>;
  requests: ({
    limit,
    orderBy,
    startAfter
  }: {
    limit?: number;
    orderBy?: OrderBy;
    startAfter?: number;
  }) => Promise<RequestsResponse>;
  epochInfo: () => Promise<EpochInfoResponse>;
  stakeAmount: ({
    user
  }: {
    user: string;
  }) => Promise<StakeAmountResponse>;
  stakes: ({
    limit,
    start
  }: {
    limit: number;
    start: number;
  }) => Promise<StakesResponse>;
}
export class RegistryQueryClient implements RegistryReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.state = this.state.bind(this);
    this.recurringFees = this.recurringFees.bind(this);
    this.requestInfo = this.requestInfo.bind(this);
    this.requests = this.requests.bind(this);
    this.epochInfo = this.epochInfo.bind(this);
    this.stakeAmount = this.stakeAmount.bind(this);
    this.stakes = this.stakes.bind(this);
  }

  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  state = async (): Promise<StateResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      state: {}
    });
  };
  recurringFees = async ({
    user
  }: {
    user: string;
  }): Promise<RecurringFeeAmountResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      recurring_fees: {
        user
      }
    });
  };
  requestInfo = async ({
    id
  }: {
    id: number;
  }): Promise<RequestInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      request_info: {
        id
      }
    });
  };
  requests = async ({
    limit,
    orderBy,
    startAfter
  }: {
    limit?: number;
    orderBy?: OrderBy;
    startAfter?: number;
  }): Promise<RequestsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      requests: {
        limit,
        order_by: orderBy,
        start_after: startAfter
      }
    });
  };
  epochInfo = async (): Promise<EpochInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      epoch_info: {}
    });
  };
  stakeAmount = async ({
    user
  }: {
    user: string;
  }): Promise<StakeAmountResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      stake_amount: {
        user
      }
    });
  };
  stakes = async ({
    limit,
    start
  }: {
    limit: number;
    start: number;
  }): Promise<StakesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      stakes: {
        limit,
        start
      }
    });
  };
}
export interface RegistryInterface extends RegistryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    config
  }: {
    config: CreateOrUpdateConfig;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  createRequest: ({
    requestInfo
  }: {
    requestInfo: CreateRequestInfo;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  cancelRequest: ({
    id
  }: {
    id: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  executeRequest: ({
    id
  }: {
    id: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  depositRecurringFee: ({
    recurringCount
  }: {
    recurringCount: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  withdrawRecurringFee: ({
    recurringCount
  }: {
    recurringCount: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  stakeDenom: ({
    numStakes
  }: {
    numStakes: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  unstake: ({
    idxs
  }: {
    idxs: number[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateExecutor: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class RegistryClient extends RegistryQueryClient implements RegistryInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.createRequest = this.createRequest.bind(this);
    this.cancelRequest = this.cancelRequest.bind(this);
    this.executeRequest = this.executeRequest.bind(this);
    this.depositRecurringFee = this.depositRecurringFee.bind(this);
    this.withdrawRecurringFee = this.withdrawRecurringFee.bind(this);
    this.receive = this.receive.bind(this);
    this.stakeDenom = this.stakeDenom.bind(this);
    this.unstake = this.unstake.bind(this);
    this.updateExecutor = this.updateExecutor.bind(this);
  }

  updateConfig = async ({
    config
  }: {
    config: CreateOrUpdateConfig;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        config
      }
    }, fee, memo, funds);
  };
  createRequest = async ({
    requestInfo
  }: {
    requestInfo: CreateRequestInfo;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_request: {
        request_info: requestInfo
      }
    }, fee, memo, funds);
  };
  cancelRequest = async ({
    id
  }: {
    id: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      cancel_request: {
        id
      }
    }, fee, memo, funds);
  };
  executeRequest = async ({
    id
  }: {
    id: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      execute_request: {
        id
      }
    }, fee, memo, funds);
  };
  depositRecurringFee = async ({
    recurringCount
  }: {
    recurringCount: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      deposit_recurring_fee: {
        recurring_count: recurringCount
      }
    }, fee, memo, funds);
  };
  withdrawRecurringFee = async ({
    recurringCount
  }: {
    recurringCount: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_recurring_fee: {
        recurring_count: recurringCount
      }
    }, fee, memo, funds);
  };
  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee, memo, funds);
  };
  stakeDenom = async ({
    numStakes
  }: {
    numStakes: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      stake_denom: {
        num_stakes: numStakes
      }
    }, fee, memo, funds);
  };
  unstake = async ({
    idxs
  }: {
    idxs: number[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      unstake: {
        idxs
      }
    }, fee, memo, funds);
  };
  updateExecutor = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_executor: {}
    }, fee, memo, funds);
  };
}
