/* eslint-disable no-unused-vars */
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.17.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { Coin, StdFee } from "@cosmjs/amino";
import {
  SigningCosmWasmClient,
  ExecuteResult,
} from "@cosmjs/cosmwasm-stargate";
import { Uint128, Swap, Step } from "./Wrapper.types";
export interface WrapperInterface {
  contractAddress: string;
  sender: string;
  swap: (
    {
      amount,
      first,
      maxOutput,
      minOutput,
      route,
      user,
    }: {
      amount: Uint128;
      first: Swap;
      maxOutput: Uint128;
      minOutput: Uint128;
      route: Step[];
      user: string;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
  checkRange: (
    {
      balanceBefore,
      denom,
      maxOutput,
      minOutput,
      user,
    }: {
      balanceBefore: Uint128;
      denom: string;
      maxOutput: Uint128;
      minOutput: Uint128;
      user: string;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
}
export class WrapperClient implements WrapperInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(
    client: SigningCosmWasmClient,
    sender: string,
    contractAddress: string
  ) {
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.swap = this.swap.bind(this);
    this.checkRange = this.checkRange.bind(this);
  }

  swap = async (
    {
      amount,
      first,
      maxOutput,
      minOutput,
      route,
      user,
    }: {
      amount: Uint128;
      first: Swap;
      maxOutput: Uint128;
      minOutput: Uint128;
      route: Step[];
      user: string;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        swap: {
          amount,
          first,
          max_output: maxOutput,
          min_output: minOutput,
          route,
          user,
        },
      },
      fee,
      memo,
      funds
    );
  };
  checkRange = async (
    {
      balanceBefore,
      denom,
      maxOutput,
      minOutput,
      user,
    }: {
      balanceBefore: Uint128;
      denom: string;
      maxOutput: Uint128;
      minOutput: Uint128;
      user: string;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        check_range: {
          balance_before: balanceBefore,
          denom,
          max_output: maxOutput,
          min_output: minOutput,
          user,
        },
      },
      fee,
      memo,
      funds
    );
  };
}
